const mongoose = require('mongoose');

const HabitSchema = new mongoose.Schema({
  userId: { type: String, required: true }, // ID del usuario due침o del h치bito
  name: { type: String, required: true }, // Nombre del h치bito
  streak: { type: Number, default: 0 }, // Contador de d칤as consecutivos
  lastCompleted: { type: Date, default: null } // 칔ltima fecha completada
});

module.exports = mongoose.model('Habit', HabitSchema);
const express = require('express');
const Habit = require('../models/Habit');
const router = express.Router();

/**
 * 游늷 Crear un nuevo h치bito
 * M칠todo: POST
 * Ruta: /api/habits
 */
router.post('/', async (req, res) => {
  try {
    const { userId, name } = req.body;
    if (!userId || !name) {
      return res.status(400).json({ error: 'userId y name son obligatorios' });
    }

    const newHabit = new Habit({ userId, name });
    await newHabit.save();

    res.status(201).json(newHabit);
  } catch (error) {
    res.status(500).json({ error: 'Error al crear el h치bito' });
  }
});

/**
 * 游늷 Obtener todos los h치bitos de un usuario
 * M칠todo: GET
 * Ruta: /api/habits/:userId
 */
router.get('/:userId', async (req, res) => {
  try {
    const habits = await Habit.find({ userId: req.params.userId });
    res.json(habits);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener los h치bitos' });
  }
});

/**
 * 游늷 Marcar h치bito como completado
 * M칠todo: PATCH
 * Ruta: /api/habits/:id/complete
 */
router.patch('/:id/complete', async (req, res) => {
  try {
    const habit = await Habit.findById(req.params.id);
    if (!habit) {
      return res.status(404).json({ error: 'H치bito no encontrado' });
    }

    const today = new Date().setHours(0, 0, 0, 0);
    const lastCompleted = habit.lastCompleted ? new Date(habit.lastCompleted).setHours(0, 0, 0, 0) : null;

    // Si el h치bito ya se marc칩 hoy, no sumamos al streak
    if (lastCompleted === today) {
      return res.status(400).json({ error: 'El h치bito ya fue completado hoy' });
    }

    // Si se complet칩 ayer, sumamos al streak
    if (lastCompleted && today - lastCompleted === 86400000) {
      habit.streak += 1;
    } else {
      habit.streak = 1; // Reiniciamos si hubo un salto de d칤as
    }

    habit.lastCompleted = new Date();
    await habit.save();

    res.json(habit);
  } catch (error) {
    res.status(500).json({ error: 'Error al completar el h치bito' });
  }
});

/**
 * 游늷 Eliminar un h치bito
 * M칠todo: DELETE
 * Ruta: /api/habits/:id
 */
router.delete('/:id', async (req, res) => {
  try {
    const habit = await Habit.findByIdAndDelete(req.params.id);
    if (!habit) {
      return res.status(404).json({ error: 'H치bito no encontrado' });
    }
    res.json({ message: 'H치bito eliminado' });
  } catch (error) {
    res.status(500).json({ error: 'Error al eliminar el h치bito' });
  }
});

module.exports = router;
